# -*- coding: utf-8 -*-
"""VigenereCipher.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xcjsKFHDQYujdKzcQdLmPOHPwuEEwW6t
"""

class VigenereCipher:
    def __init__(self):
        self.vigenere_table = self.generate_vigenere_table()

    def generate_vigenere_table(self):
        table = []
        for i in range(26):
            row = []
            for j in range(26):
                row.append(chr(((j + i) % 26) + ord('A')))
            table.append(row)
        return table

    def print_vigenere_table(self):
        print("Vigenere Cipher Table:")
        print("  | " + " | ".join([chr(ord('A') + i) for i in range(26)]))
        print("---" + "-".join(["-" for _ in range(52)]))
        for i in range(26):
            print(chr(ord('A') + i) + " | " + " | ".join(self.vigenere_table[i]))

    def encrypt(self, plain_text, key):
        plain_text = plain_text.upper()
        key = key.upper().replace(" ", "")
        encrypted_text = ""
        key_index = 0

        for char in plain_text:
            if char.isalpha():
                row = ord(key[key_index]) - ord('A')
                col = ord(char) - ord('A')
                encrypted_char = self.vigenere_table[col][row]
                encrypted_text += encrypted_char
                key_index = (key_index + 1) % len(key)
            else:
                encrypted_text += char

        return encrypted_text

def main():
    vigenere_cipher = VigenereCipher()

    plain_text = input("Enter the text to encrypt: ")
    key = input("Enter the key: ")

    while len(key) > len(plain_text):
        key = input("Enter a key (length <= plaintext): ")

    encrypted_text_key1 = vigenere_cipher.encrypt(plain_text, key)
    print("Encrypted Text (repeated key):", encrypted_text_key1)

    i = 0
    while len(key) < len(plain_text):
        key += plain_text[i]
        i += 1
    encrypted_text_key2 = vigenere_cipher.encrypt(plain_text, key)
    print("Encrypted Text (auto-generated key):", encrypted_text_key2)

    #vigenere_cipher.print_vigenere_table()  # Print Vigenere Cipher Table

if __name__ == "__main__":
    main()